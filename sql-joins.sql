# 1 List the number of films per category.
SELECT count(f.title) as nr_titles, c.name
FROM film_category AS fc
INNER JOIN film AS f ON fc.film_id = f.film_id
Inner join category as c on fc.category_id = c.category_id
GROUP BY c.category_id 
;

# 2 Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store AS s
INNER JOIN address AS a ON a.address_id = s.address_id
Inner join city as c on c.city_id = a.city_id
Inner join country as co on c.country_id = co.country_id
;

# 3 Calculate the total revenue generated by each store in dollars.
# store -> customer -> payment
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store AS s
INNER JOIN customer AS c ON s.store_id = c.store_id
INNER JOIN payment AS p ON p.customer_id = c.customer_id
GROUP BY s.store_id
;

# 4 Determine the average running time of films for each category.
SELECT c.name as category, round(avg(f.length),2) as avg_running_time
FROM film AS f
INNER JOIN film_category AS fc ON fc.film_id = f.film_id
INNER JOIN category AS c ON c.category_id = fc.category_id
GROUP BY c.category_id
;

# 5 Identify the film categories with the longest average running time.
SELECT c.name as category, round(avg(f.length),2) as avg_running_time
FROM film AS f
INNER JOIN film_category AS fc ON fc.film_id = f.film_id
INNER JOIN category AS c ON c.category_id = fc.category_id
GROUP BY c.category_id
ORDER BY round(avg(f.length),2) DESC
LIMIT 3
;

# 6 Display the top 10 most frequently rented movies in descending order.
SELECT f.title as film_name, COUNT(r.inventory_id) as rented_times
FROM film AS f
INNER JOIN inventory AS i ON i.film_id = f.film_id
INNER JOIN rental AS r ON i.inventory_id = r.inventory_id
GROUP BY i.film_id, i.inventory_id
ORDER BY COUNT(r.inventory_id) DESC
LIMIT 10
;

# 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title as film_name, i.store_id
FROM film AS f
INNER JOIN inventory AS i ON i.film_id = f.film_id
GROUP BY i.film_id, i.store_id
HAVING f.title = "Academy Dinosaur" AND i.store_id = 1
;

# 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title 
# is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT f.title as film_name,
				count(i.inventory_id) as quant_available,
                CASE
					WHEN i.inventory_id > 0 THEN "Available"
                    ELSE "Not Available"
                    END AS availability
FROM film AS f
LEFT JOIN inventory AS i ON i.film_id = f.film_id
GROUP BY f.title, i.inventory_id
;